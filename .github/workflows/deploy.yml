name: Deploy

on:
  # Runs on pushes targeting the default branch
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  generate-edgeql:
    environment:
      name: website-deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.0.36"
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            dist
            .cache
          key: ${{ runner.os }}-build-${{ hashFiles('dist') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Install dependencies
        run: bun install
      - name: Connect to Gel
        run: bunx gel instance link --dsn=${{ secrets.GEL_DSN }}
      - name: migrate db
        run: bunx gel migrate
      - name: generate edgeql-js
        run: bunx @gel/generate edgeql-js
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fingerprint-sound-edgeql-js
          path: dbschema/edgeql-js
          overwrite: true

  build-frontend:
    environment:
      name: website-deploy
    runs-on: ubuntu-latest
    needs:
      - generate-edgeql
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.0.36"
      # - name: Setup Pages
      #   uses: actions/configure-pages@v5
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            dist
            .cache
          key: ${{ runner.os }}-build-${{ hashFiles('dist') }}
          restore-keys: |
            ${{ runner.os }}-build-
      - name: Install dependencies
        run: bun install
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: fingerprint-sound-edgeql-js
      - name: Build with Bun
        run: bun run build
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fingerprint-sound-website
          path: |
            packages/frontend/dist
            Caddyfile
            docker-compose.yaml
          overwrite: true

  build-backend:
    environment:
      name: website-deploy
    runs-on: ubuntu-latest
    needs:
      - generate-edgeql
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: fingerprint-sound-edgeql-js

      - name: Extract Docker image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ vars.DOCKER_USERNAME }}/priv

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          annotations: ${{ steps.meta.outputs.annotations }}
          provenance: true
          sbom: true

  deploy:
    environment:
      name: website-deploy
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: Ubuntu-20.04
    needs:
      - build-frontend
      - build-backend
    env:
      HETZNER_SERVER: 95.217.159.233
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: fingerprint-sound-website
      - name: Deploy to Hetzner
        uses: webfactory/ssh-agent@v0.4.1
        with:
          ssh-private-key: ${{ secrets.HCOLUD_SSH }}
      - run: mkdir -p ~/.ssh/ && ssh-keyscan -H $HETZNER_SERVER >> ~/.ssh/known_hosts
      - run: scp -r * root@$HETZNER_SERVER:/root/fingerprint-sound
      - run: ssh root@$HETZNER_SERVER "cd fingerprint-sound; docker compose up -d;"
